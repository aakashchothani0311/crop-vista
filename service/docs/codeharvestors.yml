openapi: 3.1.0
info:
    title: Code Harvestors API
    description: API for CRUD operations for managing accounts, farmers, companies, distributors, demands, supplies, crops, and procurement offers tables in the database.
    version: '1.0'
servers:
  - url: http://localhost:3000

paths:
  /accounts:
    get:
      summary: Search accounts by username or get all accounts
      tags:
        - Accounts
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: The username of the account to search
      responses:
        '200':
          description: A user account matching the query or list of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: User account not found

    post:
      summary: Create a new user account
      tags:
        - Accounts
      requestBody:
        description: User account details to add
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: User account created successfully
          content:
            application/json:
              schema:
                type: object
                description: Account object of created account
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid input
        '401':
          description: Error creating account
        '409':
          description: Conflict, possibly due to duplicate username         

  /farmers:
    post:
      summary: Create a new farmer
      tags:
        - Accounts
      requestBody:
        description: Farmer profile to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farmer'
      responses:
        '201':
          description: Farmer profile successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
        '400':
            description: Error creating new profile for the farmer

  /farmers/{farmerId}:
    get:
      summary: Get a farmer profile by ID
      tags:
        - Farmers
      parameters:
        - in: path
          name: farmerId
          schema:
            type: string
          required: true
          description: ID of the farmer to retrieve
      responses:
        '200':
          description: farmer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
        '404':
          description: Farmer not found
    
    put:
      summary: Update a farmer by ID
      tags:
        - Farmers
      parameters:
        - in: path
          name: farmerId
          schema:
            type: string
          required: true
          description: ID of the farmer to update
      requestBody:
        description: Farmer data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farmer'
      responses:
        '200':
          description: Farmer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farmer'
        '401':
          description: Error updating account
        '404':
          description: Farmer not found

  /companies:
    post:
      summary: Create a new company
      tags:
        - Companies
      requestBody:
        description: Company profile to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '201':
          description: Company profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
            description: Error creating new account for the company

  /companies/{companyId}:
    get:
      summary: Get a company by ID
      tags:
        - Companies
      parameters:
        - in: path
          name: companyId
          schema:
            type: string
          required: true
          description: ID of the company to retrieve
      responses:
        '200':
          description: company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found
    put:
      summary: Update a company by ID
      tags:
        - Companies
      parameters:
        - in: path
          name: companyId
          schema:
            type: string
          required: true
          description: ID of the company to update
      requestBody:
        description: Company data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '401':
          description: Error updating account
        '404':
          description: Company not found

  /distributors:
    post:
      summary: Create a new distributor
      tags:
        - Distributors
      requestBody:
        description: Distributor profile to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Distributor'
      responses:
        '201':
          description: Distributor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Distributor'
        '400':
          description: Error creating new account for the distributor

  /distributors/{distributorId}:
    get:
      summary: Get a distributor by ID
      tags:
        - Distributors
      parameters:
        - in: path
          name: distributorId
          schema:
            type: string
          required: true
          description: ID of the distributor to retrieve
      responses:
        '200':
          description: Distributor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Distributor'
        '404':
          description: Distributor not found

    put:
      summary: Update a distributor by ID
      tags:
        - Distributors
      parameters:
        - in: path
          name: distributorId
          schema:
            type: string
          required: true
          description: ID of the distributor to update
      requestBody:
        description: Distributor data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Distributor'
      responses:
        '200':
          description: Distributor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Distributor'
        '401':
          description: Error updating account
        '404':
          description: Distributor not found

  /demands:
    get:
      summary: Get all demands or search for a demand
      tags:
        - Demands
      parameters:
        - in: query
          name: companyId
          schema:
            type: string
          description: ID of the company that created the demand
      responses:
        '200':
          description: A list of demands or a demand details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Demand'

    post:
      summary: Create a new demand
      tags:
        - Demands
      requestBody:
        description: Demand details to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Demand'
      responses:
        '201':
          description: Demand created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demand'
        '400':
          description: Error creating new demand

  /supplies:
    get:
      summary: Get all supplies or search a supply
      tags:
        - Supplies
      parameters:
        - in: query
          name: farmerId
          schema:
            type: string
          description: ID of the farmer who created the supply
      responses:
        '200':
          description: A list of supplies or supply details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supply'

    post:
      summary: Create a new supply
      tags:
        - Supplies
      requestBody:
        description: Supply details to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supply'
      responses:
        '201':
          description: Supply created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supply'
        '400':
          description: Error creating new supply

  /distprocs:
    get:
      summary: Get all distributor procurements or search procurements of a distributor
      tags:
        - DistProcs
      parameters:
        - in: query
          name: distId
          schema:
            type: string
          description: ID of the distributor who created the procurement
      responses:
        '200':
          description: A list of distributor procurements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DistProc'

    post:
      summary: Create a new distributor procurement
      tags:
        - DistProcs
      requestBody:
        description: Distributor procurement details to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistProc'
      responses:
        '201':
          description: Distributor procurement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistProc'
        '400':
          description: Error creating new Distributor procurement

  /distprocs/{distProcId}:
    put:
      summary: Update a distributor procurement by ID
      tags:
        - DistProcs
      parameters:
        - in: path
          name: distProcId
          schema:
            type: string
          required: true
          description: ID of the distribution procurement to update
      requestBody:
        description: Distributor procurement data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistProc'
      responses:
        '200':
          description: Distributor procurement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistProc'
        '401':
          description: Error updating procurement
        '404':
          description: Distributor procurement not found

  /distoffers:
    get:
      summary: Get all distributor offers or search offers of a distributor
      tags:
        - DistOffers
      parameters:
        - in: query
          name: distId
          schema:
            type: string
          description: ID of the distributor who created the offers
      responses:
        '200':
          description: A list of distributor offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DistOffer'

    post:
      summary: Create a new distributor offer
      tags:
        - DistOffers
      requestBody:
        description: Distributor offer details to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistOffer'
      responses:
        '201':
          description: Distributor offer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistOffer'
        '400':
          description: Error creating new distribution offer

  /distoffers/{offerId}:
    put:
      summary: Update a distributor offer by ID
      tags:
        - DistOffers
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
          required: true
          description: ID of the distribution offer to update
      requestBody:
        description: Distributor offer data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistOffer'
      responses:
        '200':
          description: Distributor offer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistOffer'
        '404':
          description: Distributor offer not found

  /crops:
    get:
      summary: Get all crops
      tags:
        - Crops
      responses:
        '200':
          description: A list of crops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Crop'

components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user account
          example: "2531329f-fb09-4ef7-887e-84e648214436"
        username:
          type: string
          description: UserName of the account
          example: thomas_cook
        password:
          type: string
          description: Password for the account
          example: user_password
        role:
          type: string
          enum: [farmer, company, distributor]
          description: Role of the account
          example: "farmer"
        child: 
          type: string
          format: objectId
          oneOf:
            - $ref: '#/components/schemas/Farmer'
            - $ref: '#/components/schemas/Company'
            - $ref: '#/components/schemas/Distributor'

    Profile:
      type: object
      properties:
        name:
          type: string
          description: Full name of the profile owner
          example: "John Doe"
        email:
          type: string
          description: Email address of the profile owner
          example: "john.doe@example.com"
        address:
          $ref: '#/components/schemas/Address'
      required:
        - name
        - email
      description: A profile schema containing personal information

    Address:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the address
          example: "2531329f-fb09-4ef7-887e-84e648214436"
        street1:
          type: string
          description: First line of the street address
          example: "75 St. Alphonous Street"
        street2:
          type: string
          description: Second line of the street address
          example: "Apt 1201"
        city:
          type: string
          description: City of the address
          example: "Boston"
        state:
          type: string
          description: State of the address
          example: "MA"
        zip:
          type: string
          description: Zip code of the address
          example: "02120"
        country:
          type: string
          description: Country of the address
          example: "United States"
      required:
        - street1
        - city
        - state
        - zip
        - country
      description: A schema for representing a full address

    Farmer:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the farmer
          example: "123123123123123421"
        profile:
          $ref: '#/components/schemas/Profile'
        area:
          type: number
          description: Area of the farm
          example: 80
        productionCapacity:
          type: number
          description: Production Capacity of the farm
          example: 300
        
    Company:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the company
          example: "2531329f-fb09-4ef7-887e-84e648214436"
        profile:
          $ref: '#/components/schemas/Profile'
        shippingAddress:
          $ref: '#/components/schemas/Address'

    Distributor:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the distributor
          example: "2531329f-fb09-4ef7-887e-84e648214436"
        profile:
          $ref: '#/components/schemas/Profile'
        inventoryCapacity:
          type: integer
          description: Capacity of the distributor
          example: 1000
        shippingAddress:
          $ref: '#/components/schemas/Address'

    Demand:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the demand
          example: "2531329f-fb09-4ef7-887e-84e648214436"
        companyId:
          type: string
          description: Unique identifier for the associated Company
          example: "2531329f-fb09-4ef7-887e-84e648214482"
        cropId:
          type: string
          description: Unique identifier for the associated Crop
          example: "2531329f-fb09-4ef7-887e-84e648214482"
        quantity:
          type: integer
          description: Quantity demanded
          example: 1000
        timeline:
          type: integer
          description: Number of days in which the demand is expected to be completed
          example: 60
        createdDate:
          type: string
          description: date of demand creation
    
    Supply:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the supply
          example: "2531329f-fb09-4ef7-887e-84e648214440"
        farmerid:
          type: string
          description: Unique identifier for the associated Farmer
          example: "2531329f-fb09-4ef7-887e-84e648214456"
        cropid:
          type: string
          description: Unique identifier for the associated Crop
          example: "2531329f-fb09-4ef7-887e-84e648218286"
        quantity:
          type: integer
          description: Quantity supplied
          example: 300
        timeline:
          type: integer
          description: Number of days to meet the demand
          example: 90
        createdDate:
          type: string
          description: date of supply commit creation

    DistProc:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the procurement
          example: "2531329f-fb09-4ef7-887e-84e648214477"
        distributorId:
          type: string
          format: objectId
          description: Unique identifier for the associated Distributor
          example: "64bcfba5d2d5e6479873e8e3"
        farmerId:
          type: string
          format: objectId
          description: Unique identifier for the associated Farmer
          example: "64bcfba5d2d5e6479873e8e4"
        cropId:
          type: string
          format: objectId
          description: ID of the crop involved in the process
          example: "64bcfba5d2d5e6479873e8e5"
        quantity:
          type: number
          description: Quantity of the crop to be processed
          example: 1000
        distQuote:
          type: number
          description: Quote from the distributor
          example: 1500
        iAgreeDist:
          type: boolean
          description: Distributor's agreement status
          example: true
        iAgreeFarmer:
          type: boolean
          description: Farmer's agreement status
          example: false
        status:
          type: string
          description: Current status of the procurement
          example: "Pending"
        contractDate:
          type: string
          format: date
          description: Date when the contract was established
          example: "2024-08-11"
      required:
        - distributorId
        - cropId
        - distQuote
        - status
      description: Schema for representing a distribution procurement process between a farmer and a distributor

    DistOffer:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the distributor offer
          example: 2531329f-fb09-4ef7-887e-84e648214436
        distributorId:
          type: string
          format: objectId
          description: Unique identifier for the associated distributor
          example: "64bcfba5d2d5e6479873e8e6"
        companyId:
          type: string
          format: objectId
          description: Unique identifier for the associated company
          example: "64bcfba5d2d5e6479873e8e7"
        cropId:
          type: string
          format: objectId
          description: ID of the crop involved in the offer
          example: "64bcfba5d2d5e6479873e8e9"
        quantity:
          type: number
          description: Quantity of the crop to be processed
          example: 1000
        distQuote:
          type: number
          description: Quote from the distributor
          example: 1600
        iAgreeDist:
          type: boolean
          description: Distributor's agreement status
          example: true
        iAgreeCompany:
          type: boolean
          description: Company's agreement status
          example: true
        status:
          type: string
          description: Current status of the offer
          example: "Approved"
        contractDate:
          type: string
          format: date
          description: Date when the contract was established
          example: "2024-08-11"
      required:
        - distributorId
        - cropId
        - distQuote
        - status
      description: Schema for representing a distribution offer made by a distributor to a company

    Crop:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the crop
          example: "2531329f-fb09-4ef7-887e-84e648214498"
        name:
          type: string
          description: Name of the crop
          example: "Wheat"
        grade:
          type: string
          description: Grade of the crop
          example: "A"
        msp:
          type: number
          description: Minimum Support Price (MSP) for the crop
          example: 1500
      required:
        - name
        - grade
      description: Schema for representing a crop with its name, grade, and minimum support price (MSP)